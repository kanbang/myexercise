// 停止等值线填充的实现!!!!
// 尚未实现,已有的实现存在问题,无法下去
// 参考文章及文献:
// 1) http://bbs.sciencenet.cn/home.php?mod=space&uid=244606&do=blog&id=303491
// 2) 等值线自动建立拓扑关系算法与快速填充应用
// 3) 不规则区域等值线拓扑关系的建立及充填算法
// 4) 基于等值线拓扑走向的快速区域填充算法
// 5) 一种基于三角网的等值线自动填充算法

// 目前尝试使用区域填充算法(闭合等值线->建立拓扑关系->填充)
// 但考虑到一些复杂的情况：闭合的等值线以及内部有一些孔洞(内部边界)
// 此时，定义填充区域就变得非常复杂
// 后续如果有时间，可以考虑使用1)提到的三角形填充
// 当前cpp文件不进行编译(从项目中排除编译)
#include "Contour.h"
#include "GeoAlgo.h"

#include <algorithm>
#include <iterator>
#include <cassert>

/* 使用lemon库提供的数据结构定义通用的图(或网络) */
/* ListDigraph、Arc、Node等表示通风网络 */
#include <lemon/list_graph.h>
#include <lemon/connectivity.h>
using namespace lemon;

/* 有向图 */
typedef ListDigraph Digraph;
typedef std::vector<Digraph::Node> NodeArray;
typedef Digraph::NodeMap<int> IntNodeMap;

// 链接lib
#ifdef _DEBUG
#pragma comment(lib, "lemond.lib")
#else
#pragma comment(lib, "lemon.lib")
#endif

// 查找等值线在边界上的位置
static bool FindPosOnBoundary(
	const PointArray& bpts, 
	const DT_Point& ps, 
	const DT_Point& pt,
	int& psi, int& pti)
{
	psi = -1; pti = -1; 
	for(int j=0;j<(int)bpts.size()-1;j++)
	{
		DT_Point bp1 = bpts[j], bp2 = bpts[j+1];
		if(IsPointOnline(bp1, bp2, ps))
		{
			psi = j;
		}
		else if(IsPointOnline(bp1, bp2, pt))
		{
			pti = j;
		}
	}
	return (psi != -1 && pti != -1);
}

static void FindOpenPointsOnBoundary(const PointArray& bpts, int psi, int pti, bool dir, PointArray& z_bpts)
{
	if(dir)
	{
		if(psi < pti)
		{
			for(int i=pti;i>psi;i--)
			{
				z_bpts.push_back(bpts[i]);
			}
		}
		else
		{
			for(int i=pti;i>=0;i--)
			{
				z_bpts.push_back(bpts[i]);
			}
			for(int i=bpts.size()-1;i>psi;i--)
			{
				z_bpts.push_back(bpts[i]);
			}
		}
	}
	else
	{
		if(psi < pti)
		{
			// 边界是闭合的，bpts[bt-1]==bpts[bs]
			// 因此, 要注意避免重复的情况
			for(int i=pti+1;i<(int)bpts.size()-1;i++)
			{
				z_bpts.push_back(bpts[i]);
			}
			for(int i=0;i<=psi;i++)
			{
				z_bpts.push_back(bpts[i]);
			}
		}
		else
		{
			for(int i=pti+1;i<=psi;i++)
			{
				z_bpts.push_back(bpts[i]);
			}
		}
	}
}

// 假设1:
// 当要追踪的z值按照从小到大的顺序排列时
// 等值线的终点始终沿着z减少的方向

// 假设2:
// 如果存在多个边界，开放等值线的始末点只能落在一个边界上
static void FindOpenPointsOnBoundary(
	const PointArray& bpts,
	const DT_Point& ps, 
	const DT_Point& pt,
	/* 向低z值方向的边界点 */
	PointArray& low_bpts,
	/* 向高z值方向的边界点 */
	PointArray& high_bpts)
{
	int psi, pti;
	if(!FindPosOnBoundary(bpts, ps, pt, psi, pti)) return;

	FindOpenPointsOnBoundary(bpts, psi, pti, bpts[pti].z < pt.z, low_bpts);
	FindOpenPointsOnBoundary(bpts, psi, pti, bpts[pti].z > pt.z, high_bpts);

	low_bpts.push_back(ps);
	high_bpts.push_back(ps);
}

// 闭合等值线
static void EncloseContour(
	/* 追踪得到的等值线点 */
	const PointArray& cnpts,
	/* 记录等值线信息(个数以及索引位置) */
	const ContourArray& cna,
	/* 边界多边形 */
	const PointArray& bpts,
	/* 记录合并后的等值线和信息 */
	PointArray& all_cnpts,
	ContourArray& all_cna)
{
	for(int i=0;i<(int)cna.size();i++)
	{
		// 定位到第i条等值线位置
		int s = 0;
		for(int j=0;j<i;j++)
		{
			s += cna[j].cnpts_num;
		}
		int t = s + cna[i].cnpts_num;

		if(t > s)
		{
			// 等值线起点位置s, 终点位置t-1
			if(!IsPointEqual(cnpts[s], cnpts[t-1]))
			{
				// 等值线不闭合,则需要查找边界
				PointArray low_bpts, high_bpts;           // 记录边界点
				int dir1 = cna[i].dir, dir2 = -1*dir1;    // 记录方向
				int z1 = cna[i].zi, z2 = z1 + 1;          // 记录z值索引

				FindOpenPointsOnBoundary(bpts, cnpts[s], cnpts[t-1], low_bpts, high_bpts);

				// 1) 复制low_bpts
				// 复制等值点
				std::copy(cnpts.begin()+s, cnpts.begin()+t, std::back_inserter(all_cnpts));
				// 复制边界点
				std::copy(low_bpts.begin(), low_bpts.end(), std::back_inserter(all_cnpts));

				// 复制等值线信息
				DT_Contour cnt = cna[i]; cnt.bpts_num = low_bpts.size(); cnt.dir = dir1; cnt.zi = z1;
				all_cna.push_back(cnt);

				// 2) 复制high_bpts
				// 复制等值点
				std::copy(cnpts.begin()+s, cnpts.begin()+t, std::back_inserter(all_cnpts));
				// 复制边界点
				std::copy(high_bpts.begin(), high_bpts.end(), std::back_inserter(all_cnpts));

				// 复制等值线信息
				/*DT_Contour */cnt = cna[i]; cnt.bpts_num = high_bpts.size(); cnt.dir = dir2; cnt.zi = z2;
				all_cna.push_back(cnt);
			}
			else
			{
				// 等值线闭合
				std::copy(cnpts.begin()+s, cnpts.begin()+t, std::back_inserter(all_cnpts));

				// 复制等值线信息
				DT_Contour cnt = cna[i]; 
				if(cnt.dir<0)
				{
					cnt.zi = cnt.zi + 1;
					cnt.dir = 1;
				}
				all_cna.push_back(cnt);			
			}			
		}
		else
		{
			// 该等值线没有数据
			all_cna.push_back(cna[i]);
		}
	}
}

// 判断点p是否在第k条等值线的多边形区域内?
static bool IsPointInContourPolygon(
	const PointArray& all_cnpts,
	const ContourArray& all_cna,
	int k, const DT_Point& p)
{
	// 第k条等值线的始末位置(s, t)
	int s = 0;
	for(int i=0;i<k;i++)
	{
		s += all_cna[i].cnpts_num + all_cna[i].bpts_num;
	}
	int t = s + all_cna[k].cnpts_num + all_cna[k].bpts_num;

	// 定义多边形区域:等值线 + 边界
	PointArray cntPolygon;
	std::copy(all_cnpts.begin()+s, all_cnpts.begin()+t, std::back_inserter(cntPolygon));

	// 判断特征点是否位于多边形内
	return IsPointInPolygon(p, cntPolygon);;
}

// 判断第k条等值线与其它等值线的包含关系
static void BuildContourTopolgy(
	const PointArray& all_cnpts,
	const ContourArray& all_cna,
	int k, IntArray& next_contours)
{
	int ks = 0;
	for(int i=0;i<k;i++)
	{
		ks += all_cna[i].cnpts_num + all_cna[i].bpts_num;
	}
	int kt = ks + all_cna[k].cnpts_num + all_cna[k].bpts_num;

	for(int i=0;i<(int)all_cna.size();i++)
	{
		if(i == k) continue;

		bool ret = true;
		for(int j=ks;j<kt;j++)
		{
			DT_Point p = all_cnpts[j];
			if(!IsPointInContourPolygon(all_cnpts, all_cna, i, p))
			{
				ret = false; break;
			}
		}
		if(ret)
		{
			// 边界上的所有点都在第i条等值线的多边形区域内
			next_contours.push_back(i);
		}
	}
}

// 判断第k条等值线(或边界)与其它等值线的包含关系
static void BuildContourAndBoundaryTopolgy(
	const PointArray& all_cnpts,
	const ContourArray& all_cna,
	int k, IntArray& next_contours)
{
	if(all_cna[k].cnpts_num > 0)
	{
		BuildContourTopolgy(all_cnpts, all_cna, k, next_contours);
	}
}

struct SortNode
{
	SortNode(IntNodeMap& order_) : order(order_) {}

	bool operator()(const Digraph::Node& u, const Digraph::Node& v)
	{
		return (order[u] < order[v]);
	}

	IntNodeMap& order;
};

static bool FindOutArcNode(Digraph& dg, Digraph::Node u, Digraph::Node v)
{
	bool ret = false;
	for(Digraph::OutArcIt e(dg, u); e!=INVALID; ++e)
	{
		if(v == dg.target(e))
		{
			ret = true; break;
		}
	}
	return ret;
}

// 构建等值线拓扑
static void BuildContourTopolgy(
	const PointArray& all_cnpts,
	const ContourArray& all_cna,
	IntArray& sortPos)
{
	// 采用图论的拓扑排序建立拓扑关系
	Digraph dg;
	// 添加节点
	NodeArray nodes;
	for(int i=0;i<(int)all_cna.size();i++)
	{
		nodes.push_back(dg.addNode());
	}
	// 节点关联属性(记录节点对应的等值线编号)
	// 与前面的nodes数组一起构成了双向映射
	IntNodeMap idm(dg);
	for(int i=0;i<(int)nodes.size();i++)
	{
		idm[nodes[i]] = i; // 节点的属性(对应的实际编号)
	}

	// 判断等值线包含关系, 建立拓扑网络
	// 例如等值线c1包含在c2中,则c2->c1
	for(int i=0;i<(int)all_cna.size();i++)
	{
		IntArray next_contours;
		BuildContourAndBoundaryTopolgy(all_cnpts, all_cna, i, next_contours);
		for(int j=0;j<(int)next_contours.size();j++)
		{
			dg.addArc(nodes[next_contours[j]], nodes[i]);
		}
	}

	// 拓扑排序
	IntNodeMap order(dg);
	topologicalSort(dg, order);

	// 对节点按照计算得到的拓扑顺序值排序
	std::sort(nodes.begin(), nodes.end(), SortNode(order));

	for(int i=0;i<(int)nodes.size();i++)
	{
		Digraph::Node u = nodes[i];
		sortPos.push_back(idm[u]);
	}
}

static int SearchMaxZIndex(	const ContourArray& cna)
{
	int maxZi = -1;
	for(int i=0;i<(int)cna.size();i++)
	{
		// 向外的闭合等值线
		if(cna[i].dir == -1 && cna[i].zi > maxZi)
		{
			maxZi = cna[i].zi;
		}
	}
	return maxZi;
}

static void AddOutMostBoundary(
	int maxZi,
	const PointArray& bpts, 
	PointArray& all_cnpts,
	ContourArray& all_cna)
{	
	std::copy(bpts.begin(), bpts.end(), std::back_inserter(all_cnpts));

	DT_Contour cnt = {maxZi, 0, 0, bpts.size()};
	all_cna.push_back(cnt);
}

static void testxx()
{
	PointArray polygon;
	DT_Point p1 = {0, 0}, p2={1, 1}, p3={2, 0}, p4={0.5, 0.5};
	polygon.push_back(p1);
	polygon.push_back(p2);
	polygon.push_back(p3);
		
	/* 
	* 有修改
	* 当点p位于多边形上的时候，也视为交点
	* 即在顶点以及边上的点都视为交点
	* 因此，交点为偶数，不在多边形内
	*/
	bool ret = IsPointInPolygon(p1, polygon);
}

// 闭合等值线并构建等值线拓扑
void EncloseContour_BuildTopolgy(
	/* 追踪得到的等值线点 */
	const PointArray& cnpts,
	/* 记录等值线信息(个数以及索引位置) */
	const ContourArray& cna,
	/* 搜索得到的边界点 */
	const PointArray& bpts,
	/* 记录合并后的等值线和信息 */
	PointArray& all_cnpts,
	ContourArray& all_cna,
	IntArray& sortPos)
{
	PointArray bounds;
	std::copy(bpts.begin(), bpts.end(), std::back_inserter(bounds));
	if(!IsPointEqual(bounds.front(), bounds.back()))
	{
		bounds.push_back(bounds.front());
	}

	// 闭合等值线
	EncloseContour(cnpts, cna, bounds, all_cnpts, all_cna);

	// 搜索最大z值索引
	int maxZi = SearchMaxZIndex(cna);
	if(maxZi != -1)
	{
		// 添加最大外围边界
		AddOutMostBoundary(maxZi, bounds, all_cnpts, all_cna);
	}
	
	// 构建拓扑
	BuildContourTopolgy(all_cnpts, all_cna, sortPos);

	//testxx();
}