#include "stdafx.h"

#include "TunnelDragJig2.h"
#include "DumyJigEntity.h"

static AcDbEntity* CloneEntity(const AcDbObjectId& objId)
{
	AcDbEntity* pEnt;
	acdbOpenObject(pEnt, objId, AcDb::kForRead);

	AcDbEntity* pClone = AcDbEntity::cast(pEnt->clone());

	pEnt->close();

	return pClone;
}

static void CopyBack(AcDbEntity* pSrcEnt, const AcDbObjectId& objId)
{
	AcDbEntity* pEnt;
	acdbOpenAcDbEntity(pEnt, objId, AcDb::kForWrite);
	pEnt->copyFrom(pSrcEnt);
	pEnt->close();
}

TunnelDragJig::TunnelDragJig(const AcDbObjectId objId) : m_objId(objId)
{
	m_pWS = Tunnel::cast(CloneEntity(objId));
	m_pWS->getSEPoint(m_spt, m_ept);	
}

TunnelDragJig::~TunnelDragJig()
{
	delete m_pWS;	
}

static AcGeVector3d CaclDir(const AcGePoint3d& spt, const AcGePoint3d& ept, const AcGePoint3d& dirPt)
{
	AcGeVector3d v = ept - spt;
	v.normalize();
	v.rotateBy(0.5*PI, AcGeVector3d::kZAxis);

	AcGeVector3d offset = dirPt - spt; // 或 dirPt - ept
	double L = offset.dotProduct(v);            // 计算向量offset在向量v上的投影
	if(L == 0) return AcGeVector3d::kIdentity;  // 返回零向量

	if(L < 0)
	{
		v.negate();
	}
	return v;
}

void TunnelDragJig::doIt()
{
	setDispPrompt(_T("\n在工作面两侧指定一点作为推进方向："));
	AcGePoint3d dirPt;
	if(kNormal != acquirePoint(dirPt)) return;

	// 计算方向向量
	m_dir = CaclDir(m_spt, m_ept, dirPt);
	if(m_dir.isZeroLength()) return;

	setDispPrompt(_T("\n指定基点："));
	if(kNormal != acquirePoint(m_basePt)) return;

	if(kNormal == drag())
	{
		CopyBack(m_pWS, m_objId);
	}
}

AcEdJig::DragStatus TunnelDragJig::sampler()
{	
	setUserInputControls((UserInputControls)
		(AcEdJig::kAccept3dCoordinates
		| AcEdJig::kNoNegativeResponseAccepted
  		| AcEdJig::kNoZeroResponseAccepted));
	
	//static AcGePoint3d tempPoint;

	//DragStatus stat = acquirePoint(curPt, m_basePt);
	DragStatus stat = acquireDist(m_dist, m_basePt);
	/*if(tempPoint != curPt)
	{
		tempPoint = curPt;
	}
	else if(stat == AcEdJig::kNormal)
	{
		return AcEdJig::kNoChange;
	}*/
	return stat;
}

Adesk::Boolean TunnelDragJig::update()
{
	//AcGePlane plane;
	//AcGeVector3d v = m_ept - m_spt;
	//v.normalize();

	//v.rotateBy(0.5*PI, AcGeVector3d::kZAxis);

	//AcGeVector3d offset = curPt - m_basePt;
	//double L = offset.dotProduct(v);
	//if(L == 0) return false;

	//if(L < 0)
	//{
	//	v.negate();
	//	L = -1*L;
	//}

	//AcGePoint3d newSpt = m_spt+v*L, newEpt = m_ept+v*L;
	AcGePoint3d newSpt = m_spt+m_dir*m_dist, newEpt = m_ept+m_dir*m_dist;

	// 更新工作面坐标
	m_pWS->setSEPoint(newSpt, newEpt);
	m_pWS->updateDraw();

	return Adesk::kTrue;
}

AcDbEntity * TunnelDragJig::entity() const
{
	return m_pWS;
}
