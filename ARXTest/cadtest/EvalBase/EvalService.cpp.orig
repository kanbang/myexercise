#include "StdAfx.h"
#include "EvalService.h"
#include "EvalNames.h"
#include "EvalMethod.h"
#include "EvalMethodManager.h"
#include "EvalPluginManager.h"
#include "EvalResultGenerator.h"

namespace PJ
{
	static CDaoDatabase* createDB(const CString& dbName, bool openExist = false)
	{
		CDaoDatabase* pDB = new CDaoDatabase();
		CFileFind ff;
		if(ff.FindFile(dbName))
		{
			if(openExist)
			{
				pDB->Open(dbName);
			}
			else 
			{
				CFile::Remove(dbName);
				pDB->Create(dbName);
			}
		}
		else
		{
			pDB->Create(dbName);
		}
		return pDB;
	}

	static EvalResultGenerator* CreateEvalResultGenerator( EvalMethod* pEvalMethod )
	{
		EvalResultGenerator* pERG = new EvalResultGenerator(pEvalMethod);
		pERG->setTableName(TOTAL_EVAL_RESULT_TABLE_NAME);
		return pERG;
	}

	EvalService* EvalService::m_pEvalService = 0;

	EvalService::EvalService(void)
	{
		m_pEvalMethodManager = new EvalMethodManager();
		m_pEvalPluginManager = new EvalPluginManager(m_pEvalMethodManager);
	}

	EvalService::~EvalService(void)
	{
		delete m_pEvalPluginManager;
		delete m_pEvalMethodManager;
	}

	EvalService* EvalService::CreateInstance()
	{
		if(m_pEvalService == 0)
		{
			m_pEvalService = new EvalService();
		}
		return m_pEvalService;
	}

	EvalService* EvalService::GetInstance()
	{
		return m_pEvalService;
	}

	void EvalService::DestroyInstance()
	{
		delete m_pEvalService;
		// 必须要添加这一行代码，否则m_pEvalService指向未知
		// 运行时产生错误
		m_pEvalService = 0;
	}

	void EvalService::setEvalResultDataBasePath( const CString& dbName )
	{
		m_evalResultDataBasePath = dbName;
	}

	void EvalService::loadPlugin( const CString& arxFilePath )
	{
		TCHAR szDrive[_MAX_DRIVE];
		TCHAR szDir[_MAX_DIR];
		TCHAR szFile[_MAX_FNAME];
		TCHAR szExt[_MAX_EXT];
		_tsplitpath((LPCTSTR)arxFilePath, szDrive, szDir, szFile, szExt); // 拆分路径

		CString serviceName;
		serviceName.Format(_T("%s_SERVICE_NAME"), CString(szFile).MakeUpper());

		/* 问题：插件(cmsr2010.arx)加载过程中无法找到所有使用的其它dll
		 * 奇怪：正常加载dll应该从当前目录下搜索，按理说应该是能够找到的???
		 * 临时解决方案：
		 *		1) 将插件所在文件夹路径添加到dll搜索路径
		 *		2) 或将dll的路径添加到path环境变量
		 *		3) 或提前加载插件(手动或在VVLoader中自动加载)
		 */
		// 构造arx所在文件夹路径
		TCHAR szPath[_MAX_PATH];
		_tmakepath(szPath, szDrive, szDir, NULL, NULL); // 合并盘符

		// 将该路径添加到dll搜索路径中
		// API使用前提：xp sp1(>=0x0502),在stdafx.h中修改
		SetDllDirectory(szPath);

		m_pEvalPluginManager->load(arxFilePath, serviceName);

		//TCHAR szDllPath[_MAX_PATH];
		//GetDllDirectory(_MAX_PATH, szDllPath);
		//AfxMessageBox(szDllPath);

		// 还原dll搜索路径
		SetDllDirectory(NULL);

		// 打印显示路径为空
		//     注：191版本能够正常运行，测试显示路径也是为空(默认)
		//TCHAR szDllPath2[_MAX_PATH];
		//GetDllDirectory(_MAX_PATH, szDllPath2);
		//AfxMessageBox(szDllPath2);
	}

	void EvalService::unloadPlugin( const CString& arxFilePath )
	{
		m_pEvalPluginManager->unload(arxFilePath);
	}

	void EvalService::getPluginInfo(const CString& arxFilePath, EvalPluginInfo& info )
	{
		m_pEvalPluginManager->getPluginInfo(arxFilePath, info);
	}

	void EvalService::getAllLoadedPluginPaths( AcStringArray& paths )
	{
		m_pEvalPluginManager->getAllLoadedPluginPaths(paths);
	}
	
	bool EvalService::isRegulationEvalImpl( const CString& regulation ) const
	{
		EvalMethod* pEvalMethod = m_pEvalMethodManager->getEvalMethodByName(regulation);
		return (pEvalMethod != 0);
	}

	bool EvalService::isClauseEvalImpl( const CString& regulation, int clauseNum ) const
	{
		// 规程评价没有实现或者尚未注册
		EvalMethod* pEvalMethod = m_pEvalMethodManager->getEvalMethodByName(regulation);
		if(pEvalMethod == 0) return false;

		EvalFactory* pFactory = pEvalMethod->getEvalFactoryByClauseNum(clauseNum);
		return (pFactory != 0);
	}

	bool EvalService::doRegEval(const CString& regulation, const AcDbIntArray& clauses)
	{
		// 规程评价没有实现或者尚未注册
		EvalMethod* pEvalMethod = m_pEvalMethodManager->getEvalMethodByName(regulation);
		if(pEvalMethod == 0) return false;

		EvalResultGenerator* pEvalResultGenerator = CreateEvalResultGenerator(pEvalMethod);

		// 创建数据库操作对象
		CDaoDatabase* pDB = createDB(m_evalResultDataBasePath, false); // 每次评价都重建数据库(删除已存在的数据库)
		TableCreator* pTableCreator = new TableCreator(pDB);
		DataWriter* pDataWriter = new DataWriter(pDB);

		int len = clauses.length();
		for(int i=0;i<len;i++)
		{
			pEvalResultGenerator->startEval();
			pEvalResultGenerator->setClauseNum(clauses[i]);
			pEvalResultGenerator->initEvalData();
			pEvalResultGenerator->createTable(pTableCreator);
			pEvalResultGenerator->initEvalObject();
			pEvalResultGenerator->writeToTable(pDataWriter);
			pEvalResultGenerator->endEval();
		}

		delete pTableCreator;
		delete pDataWriter;

		pDB->Close();
		delete pDB;

		delete pEvalResultGenerator;

		return true;
	}
}